package tdt4140.gr1806.app.core;

import static junit.framework.TestCase.assertTrue;

import java.sql.Date;
import java.util.ArrayList;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

/**
 * 
 * @author henriette_andersen
 *
 */
public class CustomerRepositoryTest {

	private CustomerRepository cr;
	
	
	/**
	 * Makes an instance of the data access object.
	 */
	@Before
	public void setUp() {
		this.cr = new CustomerRepository();
		
	}
	
	
	@After
	public void teardown() {
	}
	
	
	//Help methods:
	//------------------------
	
	/**
	 * Checks if two customer objects has equal data, except fields
	 *  that are generated by the database; id and date registered
	 */
	protected void checkCustomerData(final Customer origCus, final Customer dbCus) {
		Assert.assertNotNull(dbCus);
		//Assert.assertEquals(origCus.getId(), dbCus.getId());
		//Assert.assertEquals(origCus.getDateRegistered(), dbCus.getDateRegistered());
		Assert.assertEquals(origCus.getName(), dbCus.getName());
		Assert.assertEquals(origCus.getGender(), dbCus.getGender());
		Assert.assertEquals(origCus.getTelephone(), dbCus.getTelephone());
		Assert.assertEquals(origCus.getBirthDate(), dbCus.getBirthDate());
		Assert.assertEquals(origCus.getHeight(), dbCus.getHeight());
		Assert.assertEquals(origCus.getWeight(), dbCus.getWeight(), 0);
	}
	
	/**
	 * Checks that all fields that can be set null in the database,
	 * is null/0 in customer-object.
	 */
	protected void checkNullCustomerData(final Customer cus) {
		Assert.assertNull(cus.getGender());
		Assert.assertNull(cus.getTelephone());
		Assert.assertNull(cus.getBirthDate());
		Assert.assertEquals(cus.getHeight(), 0);
		Assert.assertEquals(cus.getWeight(), 0, 0);
	}
	
	
	/**
	 * If findAllCustomers() works, this will take in a customer
	 * and return true if a customer with the same id exists in the
	 * database, else false.
	 */
	private boolean isCustomerInDatabase(Customer cus) {
		int id = cus.getId();
		ArrayList<Customer> customerList = cr.findAllCustomers();
		// This should be using Customer.getCustomer(String name), but that doesn't exist in this branch
		for (Customer customer : customerList) {
			if (customer.getId()==id) {
				return true;
			}
		}
		
		return false;
	}
	
	
	/**
	 * Help method testing that we find all Customer that we added here.
	 * Takes in a list of originals, and a list of keepers, and returns all of the 
	 * customers in keepers that exist with the same id as any of the originals.
	 * 
	 * Not suitable if big database, since originals is the whole database.
	 * Then we should have some sort of mock object
	 * or a copy of the database, but empty.
	 */
	private ArrayList<Customer> removeEverythingBut(ArrayList<Customer> originals, ArrayList<Customer> keepers) {
		ArrayList<Customer> returns = new ArrayList<Customer>();
		for (Customer original : originals) {
			for (Customer keeper : keepers) {
				if (original.getId()==keeper.getId()) {
					returns.add(keeper);
				}
			}
		}
		return returns;
	}
	
	
	//------------------------
	
	
	/**
	 * Tests that customers are correctly saved and fetched from database.
	 * Does this with both a customer with all fields set, and a customer
	 * with only the name (bc the database requires it) set as a non-default
	 * value.
	 */
	@Test
	public void testSaveCustomerCreateCustomerFromId() {
		// Create a fully set customer object, and a customer object with no data:
		Customer cus = new Customer("Henry", "F", "99352762", "1994-02-15", 172, 68.00);
		Customer nullCus = new Customer("NULLIE", null, null, null, 0, 0);
		
		// Save customers to database and retrieve the objects with id and date registered:
		Customer cusS = cr.saveCustomer(cus);
		Customer nullCusS = cr.saveCustomer(nullCus);
		
		// Check that the objects returned is the same:
		Assert.assertSame(cus, cusS);
		Assert.assertSame(nullCus, nullCusS);
		
		// Checks that the set data is still the same:
		this.checkCustomerData(cus, cusS);
		
		// Checks that not set attributes is still not set, and check name:
		this.checkNullCustomerData(nullCusS);
		Assert.assertSame(nullCus.getName(), nullCusS.getName());
		
		// Get objects from id:
		Customer cusG = cr.createCustomerFromId(cusS.getId());
		Customer nullCusG = cr.createCustomerFromId(nullCusS.getId());
		
		// Check that everything is equal of objects cusG and cusS:
		this.checkCustomerData(cusG, cusS);
		Assert.assertEquals(cusG.getId(), cusS.getId());
		Assert.assertEquals(cusG.getDateRegistered(), cusS.getDateRegistered());
		
		// Check that everything is equal of objects nullCusG and nullCusS:
		this.checkNullCustomerData(nullCusG);
		Assert.assertEquals(nullCusG.getName(), nullCusS.getName());
		Assert.assertEquals(nullCusG.getId(), nullCusS.getId());
		Assert.assertEquals(nullCusG.getDateRegistered(), nullCusS.getDateRegistered());
		
		// Delete the objects from the database:
		cr.deleteCustomer(cusG);
		cr.deleteCustomer(nullCusG);
	}
	
	
	
	/**
	 * @author Matias
	 * Altered a bit by @author henriette_andersen
	 */
	@Test
	public void testAddStepsToCustomerGetTotalStepsInDateRangeGetTotalSteps() {
		Customer cus = new Customer("Hans DateRange Test", "M", "82732132", "1982-03-21", 178, 73.2);
        // Add user with steps on 2 days, test different cases
        int stepsExpected = 500+100;
        
        Date startDate = Date.valueOf("2018-01-02");
        Date endDate = Date.valueOf("2018-02-02");


        	cr.saveCustomer(cus);
        cr.addStepsToCustomer(cus, 500, "2018-02-01");
        cr.addStepsToCustomer(cus, 100, "2018-02-02");
        cr.addStepsToCustomer(cus, 1234, "2018-04-02");
        

        int stepsDateRange = cr.getTotalStepsInDateRange(cus, startDate, endDate);
        assertTrue("Did not get expected steps in range", stepsExpected == stepsDateRange);
        
        stepsExpected += 1234;
        int stepsTotal = cr.getTotalSteps(cus);
        Assert.assertEquals(stepsExpected, stepsTotal);


        //cr.deleteCustomer(cus);
	}
	
	
	
	/**
	 * This method is not optimal, but tests that the finaAllCustomers()-method
	 * finds all customers with the same id as the ones added got.
	 */
	@Test
	public void testFindAllCustomers() {
		Customer cus1 = new Customer("Mr. One", "M", "12345678", "1978-03-01", 183, 110.0);
		Customer cus2 = new Customer("Mrs. Two", "F", null, null, 130, 50);
		Customer cus3 = new Customer("Lieutenant Three", "M", "66666666", "1992-05-22", 170, 70.3);
		Customer cus4 = new Customer("Doctor Who", "O", "H-E-L-P", null, 0, 0);
		
		// The customers we want to test against:
		ArrayList<Customer> testers = new ArrayList<>();
		testers.add(cus1);
		testers.add(cus2);
		testers.add(cus3);
		testers.add(cus4);
		
		// Expected added customers. 
		// In the beginning we added no one of the testers.
		ArrayList<Customer> expected = new ArrayList<>();
		
		// The actual database customers.
		ArrayList<Customer> db = cr.findAllCustomers();
		
		// The database customers that equals the testers
		ArrayList<Customer> dbTesters = new ArrayList<>();
		dbTesters = this.removeEverythingBut(db, testers);
		
		// Assert that non of the customers is there:
		Assert.assertEquals(expected, dbTesters);
		
		// Now adding one by one, and see that they are all there:
		for (int i=0; i<4; i++) {
			Customer tester = testers.get(i);
			tester = cr.saveCustomer(tester); // to save id
			expected.add(tester);
			db = cr.findAllCustomers();
			dbTesters = this.removeEverythingBut(db, testers);
			Assert.assertEquals(expected, dbTesters);
		}
		
		
		// Delete the customers:
		for (Customer cus : testers) {
			cr.deleteCustomer(cus);
		}
		
	}
	
	/**
	 * Test that the id that the added customer got is no longer there after
	 * it was deleted.
	 */
	@Test
	public void testDeleteCustomer() {
		Customer cus = new Customer("Mr. Cool", "O", "12332188", "1980-07-18", 180, 90.3);
		
		cus = cr.saveCustomer(cus);
		Assert.assertTrue(this.isCustomerInDatabase(cus)); // Tests that the id exists in the database. 
		
		cr.deleteCustomer(cus);
		Assert.assertFalse(this.isCustomerInDatabase(cus)); // Tests that the id is no longer there.
	}
	
	
	
	
}
